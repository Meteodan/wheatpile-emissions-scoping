'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' Wheat pile emission scoping study May 2018
'
' Source code for mobile station (plume) logger. Responsible for:
'   * TSI DustTrak II - aerosol monitor
'   * LICOR Biosciences LI-840A - CO2 analyzer
'   * Airmar Tech 150WX - compact weather station + GPS
'
' Copyright 2018 :: Patrick O'Keeffe
' Laboratory for Atmospheric Research at Washington State University
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Const DAYS_OF_DATA = 28

' [] increase resolution of latitude/longitude, probably by keeping
'    separate degrees and decimal degrees

Const WX_COM = Com2   'C1/C2
Const WX_BAUD = 4800
Const WX_FMT = 3 '8/n/1, RS232
Const WX_BUFF = 250
Const DOLLAR_W = &h2457 ' "$W"
Const DOLLAR_G = &h2447 ' "$G"
Const CRLF = &h0D0A ' <CR><LF>

Const DF_TSI_PM = 1
Const TSI_PM_OFF = 0.0103 'XXXX unit-specific calibration offset (sn 8530152108)
Const TSI_PM_MLT = (1.0 - TSI_PM_OFF)/5000 '0-1.0 mg/m^3, 0-5V
'Const TSI_PM_OFF = 0.008 'XXXX unit-specific calibration offset (sn 8530150710)
'Const TSI_PM_MLT = (1.0 - TSI_PM_OFF)/5000 '0-1.0 mg/m^3, 0-5V


Public dusttrak2_analog_pm25
Units dusttrak2_analog_pm25 = mg/m^3

'record lengths from Table 1, PB100 WeatherStation Technical Manual r1.007
Public wimda As String * 81+1 
Public gprmc As String * 74+1

Public wx_bytes
Public gps_bytes

Public VP, SVP, 'for calcing mean RH
Public metvals(10)
' "IMDA," consumed
'Alias metvals(1) = barometric pressure, inches of mercury
' ",I," consumed
Alias metvals(2) = m150wx_P 'barometric pressure, bars
' ",B," consumed
Alias metvals(3) = m150wx_T 'air temperature, degrees C
' ",C,,," consumed (no water temperature or units)
Alias metvals(4) = m150wx_RH 'relative humidity, %
' ",," consumed(no absolute humidity)
Alias metvals(5) = m150wx_DP 'dewpoint, degrees C
' ",C," consumed
Alias metvals(6) = m150wx_WD 'degrees E of TN
' ",T," consumed
Alias metvals(7) = m150wx_WD_mag 'degrees E of MN
' ",M," consumed
'Alias metvals(8) = wind speed, knots
' ",N," consumed
Alias metvals(9) = m150wx_WS 'm/s
' "M*" consumed
'Alias metvals(10) = checksum
Units m150wx_P = mbar
Units m150wx_T = degC
Units m150wx_RH = %
Units m150wx_DP = degC
Units m150wx_WD = degTN
Units m150wx_WD_mag = degMN
Units m150wx_WS = m/s

'TODO FIXME: in OS 29, the `GPS` instruction gained ability to perform
'time-syncing against only NMEA data (no PPS reqd)... but it appears
'to require the GPGGA sentence. Consider jumpering COM2 to COM1 Rx and
'acquiring GPS data more neatly and also get time updates. May conflict 
'with `NetworkTimeProtocol`?

'TODO FIXME: storing latitude/longitude values in Float truncates them beyond
'required precision for mapping

Public gpsstrs(13) As String * 16
' "PRMC" consumed
'Alias gpsstrs(1) = UTC in hhmmss.ss format
'Alias gpsstrs(2) = "A" or "V"
Alias gpsstrs(3) = strLatitude 'HHMM.MMMM
'Alias gpsstrs(4) = "N" or "S"
Alias gpsstrs(5) = strLongitude 'HHMM.MMMM
'Alias gpsstrs(6) = "E" or "W"
Alias gpsstrs(7) = strSOG 'knots
Alias gpsstrs(8) = strCOG 'degrees E of TN
Alias gpsstrs(9) = strDate 'DDMMYY
Alias gpsstrs(10) = strMagVar 'degrees E/W
Alias gpsstrs(11) = strMagVarSign ' "E" or "W"
Alias gpsstrs(12) = strMode ' {A, D, E, M, S, N}
Alias gpsstrs(13) = strChecksum

Public gpsvals(5)
Alias gpsvals(1) = latitude_deg
Alias gpsvals(2) = latitude_min
Alias gpsvals(3) = longitude_deg
Alias gpsvals(4) = longitude_min
Alias gpsvals(5) = mag_variation
Public gps_mode As String * 1
Units latitude_deg = degreesN
Units latitude_min = minutesN
Units longitude_deg = degreesE
Units longitude_min = minutesE
Units mag_variation = degEofTN


DataTable(tsdata,True,86400)
  DataInterval(0,1,Sec,5)
  CardOut(0,86400*DAYS_OF_DATA)
  Sample(1,m150wx_P,IEEE4)
  Sample(1,m150wx_T,FP2)
  Sample(1,m150wx_RH,FP2)
  Sample(1,m150wx_DP,FP2)
  Sample(1,m150wx_WS,FP2)
  Sample(1,m150wx_WD,FP2)
  Sample(1,latitude_deg,FP2)
  Sample(1,latitude_min,IEEE4)
  Sample(1,longitude_deg,IEEE4)
  Sample(1,mag_variation,FP2)
  Sample(1,gps_mode,String)
EndTable

DataTable(minutely,True,-1)
  DataInterval(0,1,Min,1)
  CardOut(0,1440*DAYS_OF_DATA)
  Sample(1,dusttrak2_analog_pm25,IEEE4)
  Median(1,m150wx_P,60,IEEE4,m150wx_P=NAN)
  Median(1,m150wx_T,60,FP2,m150wx_T=NAN)
  Median(1,m150wx_RH,60,FP2,m150wx_RH=NAN)
  Median(1,m150wx_WS,60,FP2,m150wx_WS=NAN)
  Median(1,m150wx_WD,60,FP2,m150wx_WD=NAN)
EndTable


'===========================================================================
BeginProg
  SetStatus("StationName", "wheatpile-plume")
  SerialOpen(WX_COM,WX_BAUD,WX_FMT,0,WX_BUFF)
  Move(metvals(1),10,NAN,1)

	Scan (1,Sec,0,0)
	  VoltDiff(dusttrak2_analog_pm25,1,mv5000,DF_TSI_PM,True,0,250,TSI_PM_MLT,TSI_PM_OFF)
	  
    SerialInRecord(WX_COM,wimda,DOLLAR_W,0,CRLF,wx_bytes,110)
    SerialInRecord(WX_COM,gprmc,DOLLAR_G,0,CRLF,gps_bytes,110)

    If (Len(wimda)) Then
      SplitStr(metvals(1),wimda,"",10,0)
      m150wx_P *= 1000 'bar --> mbar
      VaporPressure(VP,m150wx_T,m150wx_RH)
      SatVP(SVP,m150wx_T)
    Else
      Move(metvals(1),10,NAN,1)
      VP = NAN
      SVP = NAN
    EndIf
    
    If (Len(gprmc)) Then
      'HINT cursory tests show numeric parser is faster than character-based
      'but unfortunately GPS data must be parsed as strings and therefore
      'require character-based
      SplitStr(gpsstrs(1),gprmc,",*",13,6)
      If (strLatitude="E" OR strLatitude="W") Then
        'waiting for signal lock
        Move(gpsvals(1),5,NAN,1)
        gps_mode = gpsstrs(4)
      Else
        latitude_deg = Left(strLatitude,2) 'str->int
        latitude_min = Right(strLatitude,7)
        longitude_deg = Left(strLongitude,3)
        longitude_min = Right(strLongitude,7)
        mag_variation = strMagVar
        'HINT follow TN = MN + MV convention so E=(+), W=(-)
        mag_variation *= IIF(StrComp(strMagVarSign, "W"), 1, -1)
        gps_mode = strMode
      EndIf
    Else
      Move(gpsvals(1),3,NAN,1)
      gps_mode = ""
    EndIf

    CallTable(tsdata)    
    CallTable(minutely)
	NextScan

EndProg


